{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from  torchvision import datasets, transforms\n",
    "import torch.nn as nn\n",
    "import torchvision.transforms as transform\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import PIL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "transform = transform.Compose([transform.RandomHorizontalFlip(),\n",
    "                                transform.RandomRotation(0.2),\n",
    "                                transform.ToTensor(),\n",
    "                                transform.Resize((80,80))\n",
    "                               ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = \"/Users/talhaguven/Desktop/CUB_200_2011/images\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = datasets.ImageFolder(root = data_dir , transform = transform)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_size = int(0.8 * len(dataset))\n",
    "val_size = len(dataset) - train_size\n",
    "train_dataset, val_dataset = torch.utils.data.random_split(dataset, [train_size, val_size])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "length of training data is 9430 and length of validation data is 2358\n"
     ]
    }
   ],
   "source": [
    "print(\"length of training data is {} and length of validation data is {}\".format(train_size, val_size))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[0.1486, 0.1853, 0.3462,  ..., 0.5103, 0.3892, 0.3582],\n",
      "        [0.3096, 0.2873, 0.4389,  ..., 0.5088, 0.3626, 0.3770],\n",
      "        [0.1628, 0.4934, 0.2363,  ..., 0.4400, 0.3625, 0.3592],\n",
      "        ...,\n",
      "        [0.6997, 0.6791, 0.7164,  ..., 0.3925, 0.3837, 0.4118],\n",
      "        [0.7205, 0.5858, 0.4579,  ..., 0.3853, 0.3892, 0.4497],\n",
      "        [0.1461, 0.7033, 0.7045,  ..., 0.3900, 0.4349, 0.4707]])\n"
     ]
    }
   ],
   "source": [
    "print(val_dataset[224][0][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x15f432010>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(val_dataset[224][0][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([[[0.5265, 0.4729, 0.3313,  ..., 0.8627, 0.8193, 0.7302],\n",
       "          [0.4212, 0.2660, 0.3409,  ..., 0.8794, 0.8436, 0.7531],\n",
       "          [0.3115, 0.2872, 0.3197,  ..., 0.8776, 0.8381, 0.7701],\n",
       "          ...,\n",
       "          [0.2845, 0.3600, 0.4548,  ..., 0.5126, 0.5209, 0.5208],\n",
       "          [0.2901, 0.4242, 0.5398,  ..., 0.5374, 0.5875, 0.6182],\n",
       "          [0.2813, 0.4384, 0.5250,  ..., 0.5798, 0.6580, 0.6740]],\n",
       " \n",
       "         [[0.5655, 0.4820, 0.3641,  ..., 0.8720, 0.8412, 0.7538],\n",
       "          [0.4095, 0.2674, 0.3883,  ..., 0.8873, 0.8524, 0.7766],\n",
       "          [0.3321, 0.3332, 0.3963,  ..., 0.8815, 0.8562, 0.7784],\n",
       "          ...,\n",
       "          [0.3044, 0.3663, 0.4130,  ..., 0.5362, 0.5446, 0.5601],\n",
       "          [0.2721, 0.4242, 0.4991,  ..., 0.5619, 0.6076, 0.6506],\n",
       "          [0.2768, 0.4420, 0.5019,  ..., 0.6039, 0.6855, 0.6866]],\n",
       " \n",
       "         [[0.5365, 0.4870, 0.3465,  ..., 0.9539, 0.9228, 0.8450],\n",
       "          [0.4243, 0.2515, 0.1608,  ..., 0.9696, 0.9448, 0.8786],\n",
       "          [0.2611, 0.1863, 0.1877,  ..., 0.9638, 0.9443, 0.8868],\n",
       "          ...,\n",
       "          [0.2782, 0.3462, 0.4375,  ..., 0.5267, 0.5438, 0.5588],\n",
       "          [0.2822, 0.4223, 0.5345,  ..., 0.5621, 0.6328, 0.6876],\n",
       "          [0.2764, 0.4402, 0.5395,  ..., 0.6178, 0.7204, 0.7313]]]),\n",
       " 74)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "val_dataset[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "cuda = False\n",
    "if torch.cuda.is_available():\n",
    "    cuda = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Net(nn.Module):\n",
    "    def __init__(self, num_classes=10):\n",
    "        super(Net, self).__init__()\n",
    "\n",
    "        self.layer1 = nn.Sequential(\n",
    "            nn.Conv2d(3, 16, kernel_size=5, stride=1, padding=2),\n",
    "            nn.BatchNorm2d(16),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=2, stride=2))\n",
    "        self.layer2 = nn.Sequential(\n",
    "            nn.Conv2d(16, 32, kernel_size=5, stride=1, padding=2),\n",
    "            nn.BatchNorm2d(32),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=2, stride=2))\n",
    "        self.layer3 = nn.Sequential(\n",
    "            nn.Conv2d(32, 64, kernel_size=5, stride=1, padding=2),\n",
    "            nn.BatchNorm2d(64),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=2, stride=2))\n",
    "        self.layer4 = nn.Sequential(\n",
    "            nn.Conv2d(64, 128, kernel_size=5, stride=1, padding=2),\n",
    "            nn.BatchNorm2d(128),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=2, stride=2))\n",
    "        self.fc1 = nn.Linear(5*5*128, 1600)\n",
    "        self.fc2 = nn.Linear(1600, 3200)\n",
    "        self.fc3 = nn.Linear(3200, 260)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        out = self.layer1(x)\n",
    "        out = self.layer2(out)\n",
    "        out = self.layer3(out)\n",
    "        out = self.layer4(out)\n",
    "        out = out.reshape(out.size(0), -1)\n",
    "        out = self.fc1(out)\n",
    "        out = self.fc2(out)\n",
    "        out = self.fc3(out)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Net()\n",
    "if cuda==True:\n",
    "    model.cuda()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_epochs=10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_loader = torch.utils.data.DataLoader(train_dataset,batch_size=32,shuffle=True)\n",
    "valid_data_loader = torch.utils.data.DataLoader(val_dataset,batch_size=16,shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "device= torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Net().to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "total_step = len(train_data_loader)\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    training_accuracy=0\n",
    "    val_accuracy=0\n",
    "    for i, (images, labels) in enumerate(train_data_loader):\n",
    "        \n",
    "        images = images.to(device)\n",
    "        labels = labels.to(device)\n",
    "        \n",
    "        # Forward pass\n",
    "        outputs = model(images)\n",
    "        loss = criterion(outputs, labels)\n",
    "        \n",
    "        # Backward and optimize\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "    \n",
    "        # Checking accuracy\n",
    "        preds = outputs.data.max(dim = 1, keepdim = True)[1]\n",
    "        training_accuracy += preds.eq(labels.data.view_as(preds)).cpu().sum()\n",
    "        \n",
    "        \n",
    "    training_accuracy = training_accuracy/len(train_data_loader.dataset) * 100\n",
    "        \n",
    "    print ('Epoch [{}/{}], Loss: {:.4f}, Training Accuracy: {}' \n",
    "                   .format(epoch+1, num_epochs, loss.item(), training_accuracy))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train the model\n",
    "model.train()  # train mode (batchnorm uses moving mean/variance instead of mini-batch mean/variance)\n",
    "with torch.no_grad():\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    for images, labels in train_data_loader:\n",
    "        images = images.to(device)\n",
    "        labels = labels.to(device)\n",
    "        outputs = model(images)\n",
    "        _, predicted = torch.max(outputs.data, 1)\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted == labels).sum().item()\n",
    "\n",
    "    print('Train Accuracy of the model on the 8000 test images with Relu is: {} %'.format(100 * correct / total))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test the model\n",
    "model.eval()  # eval mode (batchnorm uses moving mean/variance instead of mini-batch mean/variance)\n",
    "with torch.no_grad():\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    for images, labels in valid_data_loader:\n",
    "        images = images.to(device)\n",
    "        labels = labels.to(device)\n",
    "        outputs = model(images)\n",
    "        _, predicted = torch.max(outputs.data, 1)\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted == labels).sum().item()\n",
    "\n",
    "    print('Test Accuracy of the model on the 8000 test images with Relu is: {} %'.format(100 * correct / total))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
